package nbt

import (
	"math"
)

var testTag = &NamedTag{
	Type: TypeCompound,
	Name: "root",
	Payload: Compound{
		"byteMin": &Tag{
			Type:    TypeByte,
			Payload: int8(math.MinInt8),
		},
		"byteMax": &Tag{
			Type:    TypeByte,
			Payload: int8(math.MaxInt8),
		},
		"shortMin": &Tag{
			Type:    TypeShort,
			Payload: int16(math.MinInt16),
		},
		"shortMax": &Tag{
			Type:    TypeShort,
			Payload: int16(math.MaxInt16),
		},
		"intMin": &Tag{
			Type:    TypeInt,
			Payload: int32(math.MinInt32),
		},
		"intMax": &Tag{
			Type:    TypeInt,
			Payload: int32(math.MaxInt32),
		},
		"longMin": &Tag{
			Type:    TypeLong,
			Payload: int64(math.MinInt64),
		},
		"longMax": &Tag{
			Type:    TypeLong,
			Payload: int64(math.MaxInt64),
		},
		"floatMax": &Tag{
			Type:    TypeFloat,
			Payload: float32(math.MaxFloat32),
		},
		"floatSmallestNonzero": &Tag{
			Type:    TypeFloat,
			Payload: float32(math.SmallestNonzeroFloat32),
		},
		"doubleMax": &Tag{
			Type:    TypeDouble,
			Payload: float64(math.MaxFloat64),
		},
		"doubleSmallestNonzero": &Tag{
			Type:    TypeDouble,
			Payload: float64(math.SmallestNonzeroFloat64),
		},
		"byteArray": &Tag{
			Type:    TypeByteArray,
			Payload: []byte{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251},
		},
		"string": &Tag{
			Type:    TypeString,
			Payload: "Hello, world!",
		},
		"listEmpty": &Tag{
			Type:    TypeList,
			Payload: &List{},
		},
		"listByte": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeByte,
				Array: []int8{math.MinInt8, math.MaxInt8},
			},
		},
		"listShort": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeShort,
				Array: []int16{math.MinInt16, math.MaxInt16},
			},
		},
		"listInt": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeInt,
				Array: []int32{math.MinInt32, math.MaxInt32},
			},
		},
		"listLong": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeLong,
				Array: []int64{math.MinInt64, math.MaxInt64},
			},
		},
		"listFloat": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeFloat,
				Array: []float32{math.SmallestNonzeroFloat32, math.MaxFloat32},
			},
		},
		"listDouble": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeDouble,
				Array: []float64{math.SmallestNonzeroFloat64, math.MaxFloat64},
			},
		},
		"listByteArray": &Tag{
			Type: TypeList,
			Payload: &List{
				Type: TypeByteArray,
				Array: [][]byte{
					{0, 1},
					{1, 0},
				},
			},
		},
		"listString": &Tag{
			Type: TypeList,
			Payload: &List{
				Type:  TypeString,
				Array: []string{"foo", "bar"},
			},
		},
		"listList": &Tag{
			Type: TypeList,
			Payload: &List{
				Type: TypeList,
				Array: []*List{
					{
						Type:  TypeString,
						Array: []string{"zero"},
					},
					{
						Type:  TypeString,
						Array: []string{"one"},
					},
				},
			},
		},
		"listCompound": &Tag{
			Type: TypeList,
			Payload: &List{
				Type: TypeCompound,
				Array: []Compound{
					{
						"foo": &Tag{
							Type:    TypeString,
							Payload: "foo",
						},
					},
					{
						"bar": &Tag{
							Type:    TypeString,
							Payload: "bar",
						},
					},
				},
			},
		},
		"listIntArray": &Tag{
			Type: TypeList,
			Payload: &List{
				Type: TypeIntArray,
				Array: [][]int32{
					{0, 1},
					{1, 0},
				},
			},
		},
		"listLongArray": &Tag{
			Type: TypeList,
			Payload: &List{
				Type: TypeLongArray,
				Array: [][]int64{
					{0, 1},
					{1, 0},
				},
			},
		},
		"compoundEmpty": &Tag{
			Type:    TypeCompound,
			Payload: Compound{},
		},
		"intArray": &Tag{
			Type:    TypeIntArray,
			Payload: []int32{math.MinInt32, math.MaxInt32},
		},
		"longArray": &Tag{
			Type:    TypeLongArray,
			Payload: []int64{math.MinInt64, math.MaxInt64},
		},
	},
}

var testData = []byte{
	0x0a, 0x00, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x07, 0x00, 0x09, 0x62, 0x79, 0x74, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x00, 0x00, 0x00, 0x36, 0x02, 0x03, 0x05, 0x07, 0x0b, 0x0d, 0x11, 0x13, 0x17,
	0x1d, 0x1f, 0x25, 0x29, 0x2b, 0x2f, 0x35, 0x3b, 0x3d, 0x43, 0x47, 0x49, 0x4f, 0x53, 0x59, 0x61,
	0x65, 0x67, 0x6b, 0x6d, 0x71, 0x7f, 0x83, 0x89, 0x8b, 0x95, 0x97, 0x9d, 0xa3, 0xa7, 0xad, 0xb3,
	0xb5, 0xbf, 0xc1, 0xc5, 0xc7, 0xd3, 0xdf, 0xe3, 0xe5, 0xe9, 0xef, 0xf1, 0xfb, 0x01, 0x00, 0x07,
	0x62, 0x79, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x7f, 0x01, 0x00, 0x07, 0x62, 0x79, 0x74, 0x65, 0x4d,
	0x69, 0x6e, 0x80, 0x0a, 0x00, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x00, 0x06, 0x00, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78,
	0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x15, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x7a, 0x65, 0x72, 0x6f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x4d, 0x61, 0x78, 0x7f, 0x7f, 0xff, 0xff, 0x05, 0x00, 0x14, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x7a, 0x65, 0x72, 0x6f, 0x00, 0x00,
	0x00, 0x01, 0x0b, 0x00, 0x08, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x00, 0x00, 0x00,
	0x02, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x03, 0x00, 0x06, 0x69, 0x6e, 0x74, 0x4d,
	0x61, 0x78, 0x7f, 0xff, 0xff, 0xff, 0x03, 0x00, 0x06, 0x69, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x80,
	0x00, 0x00, 0x00, 0x09, 0x00, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x01, 0x00,
	0x00, 0x00, 0x02, 0x80, 0x7f, 0x09, 0x00, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x09, 0x00, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x03, 0x66, 0x6f, 0x6f,
	0x00, 0x03, 0x66, 0x6f, 0x6f, 0x00, 0x08, 0x00, 0x03, 0x62, 0x61, 0x72, 0x00, 0x03, 0x62, 0x61,
	0x72, 0x00, 0x09, 0x00, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x06,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7f, 0xef, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x09, 0x00, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x7f, 0xff, 0xff, 0x09, 0x00,
	0x07, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x03, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00,
	0x00, 0x7f, 0xff, 0xff, 0xff, 0x09, 0x00, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x09, 0x00, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x09, 0x00, 0x00, 0x00,
	0x02, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x08, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x09, 0x00, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x04, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x00, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x02,
	0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x7f, 0xff, 0x09, 0x00, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x66, 0x6f, 0x6f, 0x00,
	0x03, 0x62, 0x61, 0x72, 0x0c, 0x00, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x7f, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x78, 0x7f, 0xff, 0x02, 0x00, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e,
	0x80, 0x00, 0x08, 0x00, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x00, 0x0d, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x00,
}

var testJSON = []byte(`{
  "type": "Compound",
  "name": "root",
  "payload": {
    "byteArray": {
      "type": "ByteArray",
      "payload": [
        "2",
        "3",
        "5",
        "7",
        "11",
        "13",
        "17",
        "19",
        "23",
        "29",
        "31",
        "37",
        "41",
        "43",
        "47",
        "53",
        "59",
        "61",
        "67",
        "71",
        "73",
        "79",
        "83",
        "89",
        "97",
        "101",
        "103",
        "107",
        "109",
        "113",
        "127",
        "131",
        "137",
        "139",
        "149",
        "151",
        "157",
        "163",
        "167",
        "173",
        "179",
        "181",
        "191",
        "193",
        "197",
        "199",
        "211",
        "223",
        "227",
        "229",
        "233",
        "239",
        "241",
        "251"
      ]
    },
    "byteMax": {
      "type": "Byte",
      "payload": "127"
    },
    "byteMin": {
      "type": "Byte",
      "payload": "-128"
    },
    "compoundEmpty": {
      "type": "Compound",
      "payload": {}
    },
    "doubleMax": {
      "type": "Double",
      "payload": "1.7976931348623157e+308"
    },
    "doubleSmallestNonzero": {
      "type": "Double",
      "payload": "5e-324"
    },
    "floatMax": {
      "type": "Float",
      "payload": "3.4028235e+38"
    },
    "floatSmallestNonzero": {
      "type": "Float",
      "payload": "1e-45"
    },
    "intArray": {
      "type": "IntArray",
      "payload": [
        "-2147483648",
        "2147483647"
      ]
    },
    "intMax": {
      "type": "Int",
      "payload": "2147483647"
    },
    "intMin": {
      "type": "Int",
      "payload": "-2147483648"
    },
    "listByte": {
      "type": "List",
      "payload": {
        "type": "Byte",
        "array": [
          "-128",
          "127"
        ]
      }
    },
    "listByteArray": {
      "type": "List",
      "payload": {
        "type": "ByteArray",
        "array": [
          [
            "0",
            "1"
          ],
          [
            "1",
            "0"
          ]
        ]
      }
    },
    "listCompound": {
      "type": "List",
      "payload": {
        "type": "Compound",
        "array": [
          {
            "foo": {
              "type": "String",
              "payload": "foo"
            }
          },
          {
            "bar": {
              "type": "String",
              "payload": "bar"
            }
          }
        ]
      }
    },
    "listDouble": {
      "type": "List",
      "payload": {
        "type": "Double",
        "array": [
          "5e-324",
          "1.7976931348623157e+308"
        ]
      }
    },
    "listEmpty": {
      "type": "List",
      "payload": {
        "type": "End",
        "array": null
      }
    },
    "listFloat": {
      "type": "List",
      "payload": {
        "type": "Float",
        "array": [
          "1e-45",
          "3.4028235e+38"
        ]
      }
    },
    "listInt": {
      "type": "List",
      "payload": {
        "type": "Int",
        "array": [
          "-2147483648",
          "2147483647"
        ]
      }
    },
    "listIntArray": {
      "type": "List",
      "payload": {
        "type": "IntArray",
        "array": [
          [
            "0",
            "1"
          ],
          [
            "1",
            "0"
          ]
        ]
      }
    },
    "listList": {
      "type": "List",
      "payload": {
        "type": "List",
        "array": [
          {
            "type": "String",
            "array": [
              "zero"
            ]
          },
          {
            "type": "String",
            "array": [
              "one"
            ]
          }
        ]
      }
    },
    "listLong": {
      "type": "List",
      "payload": {
        "type": "Long",
        "array": [
          "-9223372036854775808",
          "9223372036854775807"
        ]
      }
    },
    "listLongArray": {
      "type": "List",
      "payload": {
        "type": "LongArray",
        "array": [
          [
            "0",
            "1"
          ],
          [
            "1",
            "0"
          ]
        ]
      }
    },
    "listShort": {
      "type": "List",
      "payload": {
        "type": "Short",
        "array": [
          "-32768",
          "32767"
        ]
      }
    },
    "listString": {
      "type": "List",
      "payload": {
        "type": "String",
        "array": [
          "foo",
          "bar"
        ]
      }
    },
    "longArray": {
      "type": "LongArray",
      "payload": [
        "-9223372036854775808",
        "9223372036854775807"
      ]
    },
    "longMax": {
      "type": "Long",
      "payload": "9223372036854775807"
    },
    "longMin": {
      "type": "Long",
      "payload": "-9223372036854775808"
    },
    "shortMax": {
      "type": "Short",
      "payload": "32767"
    },
    "shortMin": {
      "type": "Short",
      "payload": "-32768"
    },
    "string": {
      "type": "String",
      "payload": "Hello, world!"
    }
  }
}`)
