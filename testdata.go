package nbt

import (
	"math"
)

var testTag = &NamedTag{
	Type: TypeCompound,
	Name: "root",
	Payload: Compound{
		"byteMin": &NamedTag{
			Type:    TypeByte,
			Name:    "byteMin",
			Payload: int8(math.MinInt8),
		},
		"byteMax": &NamedTag{
			Type:    TypeByte,
			Name:    "byteMax",
			Payload: int8(math.MaxInt8),
		},
		"shortMin": &NamedTag{
			Type:    TypeShort,
			Name:    "shortMin",
			Payload: int16(math.MinInt16),
		},
		"shortMax": &NamedTag{
			Type:    TypeShort,
			Name:    "shortMax",
			Payload: int16(math.MaxInt16),
		},
		"intMin": &NamedTag{
			Type:    TypeInt,
			Name:    "intMin",
			Payload: int32(math.MinInt32),
		},
		"intMax": &NamedTag{
			Type:    TypeInt,
			Name:    "intMax",
			Payload: int32(math.MaxInt32),
		},
		"longMin": &NamedTag{
			Type:    TypeLong,
			Name:    "longMin",
			Payload: int64(math.MinInt64),
		},
		"longMax": &NamedTag{
			Type:    TypeLong,
			Name:    "longMax",
			Payload: int64(math.MaxInt64),
		},
		"floatMax": &NamedTag{
			Type:    TypeFloat,
			Name:    "floatMax",
			Payload: float32(math.MaxFloat32),
		},
		"floatSmallestNonzero": &NamedTag{
			Type:    TypeFloat,
			Name:    "floatSmallestNonzero",
			Payload: float32(math.SmallestNonzeroFloat32),
		},
		"doubleMax": &NamedTag{
			Type:    TypeDouble,
			Name:    "doubleMax",
			Payload: float64(math.MaxFloat64),
		},
		"doubleSmallestNonzero": &NamedTag{
			Type:    TypeDouble,
			Name:    "doubleSmallestNonzero",
			Payload: float64(math.SmallestNonzeroFloat64),
		},
		"byteArray": &NamedTag{
			Type:    TypeByteArray,
			Name:    "byteArray",
			Payload: []byte{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251},
		},
		"string": &NamedTag{
			Type:    TypeString,
			Name:    "string",
			Payload: "Hello, world!",
		},
		"listEmpty": &NamedTag{
			Type:    TypeList,
			Name:    "listEmpty",
			Payload: &List{},
		},
		"listString": &NamedTag{
			Type: TypeList,
			Name: "listString",
			Payload: &List{
				Type:  TypeString,
				Array: []string{"foo", "bar", "baz"},
			},
		},
		"compoundEmpty": &NamedTag{
			Type:    TypeCompound,
			Name:    "compoundEmpty",
			Payload: Compound{},
		},
		"intArray": &NamedTag{
			Type:    TypeIntArray,
			Name:    "intArray",
			Payload: []int32{math.MinInt32, 0, math.MaxInt32},
		},
		"longArray": &NamedTag{
			Type:    TypeLongArray,
			Name:    "longArray",
			Payload: []int64{math.MinInt64, 0, math.MaxInt64},
		},
	},
}

var testData = []byte{
	0x0a, 0x00, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x07, 0x00, 0x09, 0x62, 0x79, 0x74, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x00, 0x00, 0x00, 0x36, 0x02, 0x03, 0x05, 0x07, 0x0b, 0x0d, 0x11, 0x13, 0x17,
	0x1d, 0x1f, 0x25, 0x29, 0x2b, 0x2f, 0x35, 0x3b, 0x3d, 0x43, 0x47, 0x49, 0x4f, 0x53, 0x59, 0x61,
	0x65, 0x67, 0x6b, 0x6d, 0x71, 0x7f, 0x83, 0x89, 0x8b, 0x95, 0x97, 0x9d, 0xa3, 0xa7, 0xad, 0xb3,
	0xb5, 0xbf, 0xc1, 0xc5, 0xc7, 0xd3, 0xdf, 0xe3, 0xe5, 0xe9, 0xef, 0xf1, 0xfb, 0x01, 0x00, 0x07,
	0x62, 0x79, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x7f, 0x01, 0x00, 0x07, 0x62, 0x79, 0x74, 0x65, 0x4d,
	0x69, 0x6e, 0x80, 0x0a, 0x00, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x00, 0x06, 0x00, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78,
	0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x15, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x7a, 0x65, 0x72, 0x6f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x4d, 0x61, 0x78, 0x7f, 0x7f, 0xff, 0xff, 0x05, 0x00, 0x14, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x7a, 0x65, 0x72, 0x6f, 0x00, 0x00,
	0x00, 0x01, 0x0b, 0x00, 0x08, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x00, 0x00, 0x00,
	0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x03, 0x00, 0x06,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x7f, 0xff, 0xff, 0xff, 0x03, 0x00, 0x06, 0x69, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x80, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x66, 0x6f, 0x6f, 0x00,
	0x03, 0x62, 0x61, 0x72, 0x00, 0x03, 0x62, 0x61, 0x7a, 0x0c, 0x00, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x04, 0x00, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x04, 0x00, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78,
	0x7f, 0xff, 0x02, 0x00, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x80, 0x00, 0x08,
	0x00, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x00, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c,
	0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x00,
}
